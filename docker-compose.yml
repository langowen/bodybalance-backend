services:
  bodybalance:
    image: langowen/bodybalance:${BODYBAL_TAG:-latest}
    container_name: bodybalance
    ports:
      - "8083:80"
    logging:
      driver: loki
      options:
        loki-url: http://localhost:3100/loki/api/v1/push
        mode: "non-blocking"
        loki-retries: "5"
        loki-batch-wait: "10s"
        loki-pipeline-stages: |
          - regex:
              expression: '(?P<level>[A-Z]{4})'
          - labels:
              level:
          - timestamp:
              source: time
              format: RFC3339Nano
    environment:
      - BD_USER=bodybalance
      - BD_PORT=5432
      - BD_HOST=postgres_body
      - BD_DBNAME=bodybalance
      - BD_PASSWORD=${BD_PASSWORD}
      - BD_SCHEMA=public
      - HTTP_PORT=80
      - HTTP_SIGNING_KEY=${SIGNING_KEY}
      - LOG_LEVEL=debug
     # - PATCH_CONFIG=./config/dev.yaml
      - BASE_URL=${BASE_URL:-https://api.7375.org}
      - VIDEO_PATCH=data/video
      - IMAGES_PATCH=data/img
      - TZ=Europe/Moscow
      - DOCS_USER=${DOCS_USER}
      - DOCS_PASSWORD=${DOCS_PASSWORD}
      - ENV=prod
    volumes:
      - /srv/docker/bodybalance/video/:/app/data/video/
      - /srv/docker/bodybalance/config/:/app/config/
      - /srv/docker/bodybalance/img/:/app/data/img/
      - /srv/docker/bodybalance/logs/:/app/logs/
    restart: unless-stopped
    depends_on:
      - postgres_body
      - redis
    networks:
      body:

  postgres_body:
    image: postgres:${POSTGRES_TAG:-16}
    container_name: postgres_body
    logging:
      driver: loki
      options:
        loki-url: http://localhost:3100/loki/api/v1/push
        mode: "non-blocking"
        loki-retries: "5"
        loki-batch-wait: "10s"
        loki-pipeline-stages: |
          - regex:
              expression: '(?P<level>[A-Z]{4})'
          - labels:
              level:
          - timestamp:
              source: time
              format: RFC3339Nano
    environment:
      POSTGRES_DB: bodybalance
      POSTGRES_USER: bodybalance
      POSTGRES_PASSWORD: ${BD_PASSWORD}
    ports:
      - '5455:5432'
    volumes:
      - '/srv/docker/bodybalance/pg:/var/lib/postgresql/data'
    networks:
      body:

  redis:
    image: redis:${REDIS_TAG:-latest}
    container_name: redis
    volumes:
      - "/srv/docker/bodybalance/redis:/data"
    ports:
      - "6379:6379"
    restart: always
    environment:
      - REDIS_REPLICATION_MODE=master
    networks:
      - body

  prometheus:
    image: prom/prometheus:latest
    container_name: bodybalance_prometheus
    ports:
      - "9090:9090"
    volumes:
      - /srv/docker/bodybalance/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - body

  grafana:
    image: grafana/grafana:latest
    container_name: bodybalance_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - body

volumes:
  prometheus_data:
  grafana_data:

networks:
  body:
    driver: bridge