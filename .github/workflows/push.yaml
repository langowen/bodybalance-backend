name: golang-pipeline

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    container: golang:1.24.3
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up safe directory
        run: git config --global --add safe.directory /__w/bodybalance-backend/bodybalance-backend

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod tidy
          go mod verify

      - name: Run Unit Tests
        run: go test -v -coverprofile=coverage.out ./...

      - name: Run Go Vet
        run: go vet ./...

      - name: Calculate code coverage
        run: |
          echo "Content of coverage.out file:"
          cat coverage.out
          
          echo "Coverage report details:"
          go tool cover -func=coverage.out
          
          # Пробуем получить покрытие и устанавливаем значение по умолчанию, если не получается
          coverage=$(go tool cover -func=coverage.out | grep -E 'total:|^total:' | awk '{print $NF}' | tr -d '%' || echo "0.0")
          
          # Проверяем, что coverage не пустой
          if [ -z "$coverage" ]; then
            echo "Failed to extract coverage percentage, using default"
            coverage="0.0"
          fi
          
          echo "Extracted coverage: $coverage%"
          echo "COVERAGE=$coverage" >> $GITHUB_ENV

      - name: Update README badges
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          # Определяем цвет бейджа в зависимости от покрытия
          if (( $(echo "$COVERAGE < 50" | bc -l) )); then
            color="red"
          elif (( $(echo "$COVERAGE < 80" | bc -l) )); then
            color="yellow"
          else
            color="green"
          fi
          
          # Получаем версию Go из go.mod
          go_version=$(grep -P '^go\s+[0-9]+\.[0-9]+(\.[0-9]+)?' go.mod | awk '{print $2}')
          
          # Получаем последний тег
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Обновляем бейджи в README.md
          sed -i "s|!\[Coverage\].*|![Coverage](https://img.shields.io/badge/Coverage-${COVERAGE}%25-${color})|g" README.md
          sed -i "s|!\[Go Version\].*|![Go Version](https://img.shields.io/badge/Go-${go_version}-blue)|g" README.md
          sed -i "s|!\[Latest Release\].*|![Latest Release](https://img.shields.io/badge/Release-${latest_tag}-blue)|g" README.md

      - name: Commit README changes
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add README.md
          git commit -m "Update coverage badge to ${COVERAGE}%" || echo "No changes to commit"
          git push || echo "No changes to push"

  deploy:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: langowen/bodyBalance
          tags: |
            type=ref,event=tag

      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.get_version.outputs.version }}
            GIT_COMMIT=${{ github.sha }}